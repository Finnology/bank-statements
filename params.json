{"name":"Bank-statements","tagline":"PHP library to parse bank account statements","body":"# Bank Statements\r\n\r\n[![Build Status](https://travis-ci.org/jakubzapletal/bank-statements.svg?branch=master)](https://travis-ci.org/jakubzapletal/bank-statements)\r\n[![Coverage Status](https://coveralls.io/repos/jakubzapletal/bank-statements/badge.png?branch=master)](https://coveralls.io/r/jakubzapletal/bank-statements?branch=master)\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/jakubzapletal/bank-statements/v/stable.png)](https://packagist.org/packages/jakubzapletal/bank-statements)\r\n[![Total Downloads](https://poser.pugx.org/jakubzapletal/bank-statements/downloads.png)](https://packagist.org/packages/jakubzapletal/bank-statements)\r\n[![Latest Unstable Version](https://poser.pugx.org/jakubzapletal/bank-statements/v/unstable.png)](https://packagist.org/packages/jakubzapletal/bank-statements)\r\n[![License](https://poser.pugx.org/jakubzapletal/bank-statements/license.png)](https://packagist.org/packages/jakubzapletal/bank-statements)\r\n\r\nThis is a PHP library to parse bank account statements. The purpose of this library is to simplify bank statements processing\r\nand usage in your application in more standardized way. The parser result is an instance of:\r\n`JakubZapletal\\Component\\BankStatement\\Statement\\StatementInterface` containing detail information\r\nabout a statement and an array of `JakubZapletal\\Component\\BankStatement\\Statement\\Transaction\\TransactionInterface` with further\r\ninformation about transactions.\r\n\r\n\r\n### Supported formats/bank list\r\n\r\n* ABO (`*.gpc`) [[doc](doc/abo.md)]\r\n * Česká spořitelna (CZ): `JakubZapletal\\Component\\BankStatement\\Parser\\ABO\\CeskaSporitelnaCZParser`\r\n * ČSOB (CZ): `JakubZapletal\\Component\\BankStatement\\Parser\\ABOParser`\r\n * Fio banka (CZ): `JakubZapletal\\Component\\BankStatement\\Parser\\ABOParser`\r\n * GE Money Bank (CZ): `JakubZapletal\\Component\\BankStatement\\Parser\\ABOParser`\r\n * Komerční banka (CZ), *alias KM format*: `JakubZapletal\\Component\\BankStatement\\Parser\\ABOParser`\r\n * Raiffeisenbank (CZ): `JakubZapletal\\Component\\BankStatement\\Parser\\ABOParser`\r\n* XML\r\n * ČSOB (CZ) [[doc](doc/xml/csob_cz.md)]: `JakubZapletal\\Component\\BankStatement\\Parser\\XML\\CSOBCZParser`\r\n* CSV\r\n\r\n\r\n## Installation\r\n\r\nNote that Bank Statements is [PSR-4](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md) compliant:\r\n\r\n### Composer\r\n\r\nIf you don't have Composer [install](http://getcomposer.org/doc/00-intro.md#installation) it:\r\n\r\n```bash\r\n$ curl -s https://getcomposer.org/installer | php\r\n```\r\n\r\nAdd `jakubzapletal/bank-statements` to `composer.json`:\r\n\r\n```bash\r\n$ composer require \"jakubzapletal/bank-statements:1.0.*@dev\"\r\n```\r\n\r\n\r\n## Usage\r\n\r\nParsing of each format is provided by a class implementing:\r\n\r\n```php\r\nJakubZapletal\\Component\\BankStatement\\Parser\\ParserInterface\r\n```\r\n\r\nThanks to the interface we can rely on two main public methods: `parseFile` and `parseContent`.\r\n\r\n* `parseFile` expects as an argument a **path to file** and then processes the parsing\r\n* `parseContent` expects as an argument a **string of content** and then processes the parsing\r\n\r\nBoth methods return a class implementing:\r\n\r\n```php\r\nJakubZapletal\\Component\\BankStatement\\Statement\\StatementInterface\r\n```\r\n\r\nThe statement class includes transaction items, which are classes implementing:\r\n\r\n```php\r\nJakubZapletal\\Component\\BankStatement\\Statement\\Transaction\\TransactionInterface\r\n```\r\n\r\nThis behaviour ensures the **same approach to the parsing and results for all parsers**.\r\n\r\nAll abstract classes and standard classes are **easily extendable**, allowing implement parsing process of any data.\r\n\r\nThe basic statement class:\r\n\r\n```php\r\nJakubZapletal\\Component\\BankStatement\\Statement\\Statement\r\n```\r\n\r\nimplements `Countable` and `Iterator`, so we can call function `count()` on it's instances or traverse them using `foreach()`.\r\nKeep in mind that transactions of the statements are used. If you need more functionality in the statement class,\r\nI recommend extend this class.\r\n\r\n### Examples\r\n\r\nThe parsing:\r\n\r\n```php\r\nuse JakubZapletal\\Component\\BankStatement\\Parser\\ABOParser;\r\n\r\n$parser = new ABOParser();\r\n\r\n// by path to file\r\n$path = '/path/to/file';\r\n$statement = $parser->parseFile($path);\r\n\r\n// by content\r\n$content = 'string of data';\r\n$statement = $parser->parseContent($content);\r\n```\r\n\r\nManipulation with the statement:\r\n\r\n```php\r\necho count($statement); // echo count of transaction items\r\n\r\nforeach ($statement as $transaction) {\r\n    // do something with each transaction\r\n}\r\n\r\necho $statement->getAccountNumber(); // echo an account number of the statement\r\n```\r\n\r\n\r\n## Contributing\r\n\r\nContributions are welcome! Please see the [Contribution Guidelines](contributing.md).","google":"UA-50260267-1","note":"Don't delete this file! It's used internally to help with page regeneration."}